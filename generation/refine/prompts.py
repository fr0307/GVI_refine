feedback_system = "I am building a dataset of vulnerable functions. You are an advisor, and you need to offer some feedbacks to help turn the provided function into a high-quality sample of vulnerable functions. Please use your background knowledge to follow the steps below.\n\n"

judge_prompts = ["Step 1: explain the given function. Please read and understand the function provided below, then summarize its meaning and functionality. Your answer should be within 100 tokens."\
            "\n[function]\n```c\n{code}\n```",
                 "Step 2: determine whether there are certain types of vulnerabilities. The given function above may contain vulnerabilities or may not. "
            "Below, I will give descriptions of certain types of vulnerabilities, "
            "please determine whether the given function contains vulnerabilities that correspond to these descriptions." \
            " If it does, start your answer with `Yes, it contains such kind of vulnerabilities`, then identify the type and location of the " \
            "vulnerability. Otherwise, start the answer with `No, it doesn't contain such vulnerabilities`, then briefly explain why."\
            " Note: It is acceptable for the function to have other types of vulnerabilities not listed in the provided vulnerability type descriptions." \
            " The focus is on the types of vulnerabilities described below. The function does not need to contain all the described vulnerabilities; identifying even a subset of them is sufficient." \
            " Other aspects, such as the names of identifiers, are not important."\
            " Your answer should be within 100 tokens. "\
            "\n[vulnerability type descriptions]\n{type}\n\n"
]

explain_prompt = "Step 1: explain the given function. Please read and understand the function provided below, then summarize its meaning and functionality. Your answer should be within 100 tokens."\
            "\n[function]\n```c\n{code}\n```"

quality_feedback_prompts = [
    "Step {step}: Assess Complexity. Here, 'Complexity' refers to how intricate or convoluted the vulnerable parts are. A higher score means the vulnerable code is deeply embedded within complex logic (e.g., multiple layers of indirection, nested structures, or intertwined control flows), making it harder to analyze but still exploitable. The goal is to assess how much additional complexity surrounds the vulnerable logic, not the overall function size. You can evaluate complexity based on:\n1-The number of lines\n2-Cyclomatic complexity\n3-Other reasonable metrics\nPlease review the given function, rate its 'Complexity' on scale from 1(very simple) to 5(extremely complex), and provide your assessment of the complexity of the vulnerable parts as evidence. Specifically, if and only if you assign a 5, and can clearly justify this score with specific features of the code, then you may begin your answer with: `No improvement needed for this area.`. Response in the following format: **Complexity Rating:**<rate> \n\n**Assessment:**<your assessment>. Your answer should be within 100 tokens.\n\n",
    "Step {step}: Assess Completeness. Here 'Completeness' means that the function includes all its original content without omitting any parts using ellipses or other similar methods. Please review the given function, rate its 'Completeness' on scale from 1(very imcomplete) to 5(extremely complete), and provide your assessment of its completeness as evidence. Specifically, if and only if you assign a 5, and can clearly justify this score with specific features of the code, then you may begin your answer with: `No improvement needed for this area.`. Response in the following format: **Completeness Rating:**<rate> \n\n**Assessment:**<your assessment>. Your answer should be within 100 tokens.\n\n",
    "Step {step}: Assess Relevance. Here 'Relevance' means the degree of association between the function content and its primary task. You may evaluate relevance based on:\n1-The number of lines of code unrelated to task\n2-Percentage of code related to task\n3-Other reasonable metrics.\nPlease review the given function, rate its 'Relevance' on scale from 1(very irrelevant) to 5(extremely relevant), and provide your assessment of its relevance as evidence. Specifically, if and only if you assign a 5, and can clearly justify this score with specific features of the code, then you may begin your answer with: `No improvement needed for this area.`. Response in the following format: **Relevance Rating:**<rate> \n\n**Assessment:**<your assessment>. Your answer should be within 100 tokens.\n\n",
    "Step {step}: Assess Domain-Specificity. Here, 'Domain-Specificity' refers to the degree to which the function is tailored to a particular domain or application context. You can evaluate domain-specificity based on:\n1-The relevance of identifier names to the domain\n2-The presence of Common Weakness Enumeration (CWE) entries relevant to the domain\n3-Other reasonable metrics\nPlease review the given function, rate its 'Domain-Specificity' on scale from 1(fully generic) to 5(extremely domain-specific), and provide your assessment of the complexity of its domain-specificity as evidence. Specifically, if and only if you assign a 5, and can clearly justify this score with specific features of the code, then you may begin your answer with: `No improvement needed for this area.`. Response in the following format: **Domain-Specificity Rating:**<rate> \n\n**Assessment:**<your assessment>. Your answer should be within 100 tokens.\n\n",
    "Step {step}: Assess Single-Function Enclosure. Here, 'Single-Function Enclosure' refers to the extent to which all logic is encapsulated within a single function. While function calls are allowed within this function, no additional function definitions (i.e., function bodies) should appear in the code. Additionally, global variables and macro definitions (e.g., #define) should be avoided unless they are necessary and placed inside the function. You can evaluate single-function enclosure based on:\n1-Whether the code contains more than one function body\n2-Whether the code contains global variables or macro definitions (e.g., #define) outside the function.\n3-Other reasonable metrics.\nPlease review the given function, rate its 'Single-Function Enclosure' on scale from 1(completely violate single-function enclosure principle) to 5(meets the criteria for single-function enclosure perfectly), and provide your assessment of its single-function enclosure as evidence. Specifically, if and only if you assign a 5, and can clearly justify this score with specific features of the code, then you may begin your answer with: `No improvement needed for this area.`. Response in the following format: **Single-Function Enclosure Rating:**<rate> \n\n**Assessment:**<your assessment>. Your answer should be within 100 tokens.\n\n"
]

factor_explanations = [
    "'Complexity' refers to how intricate or convoluted the vulnerable parts are. A higher score means the vulnerable code is deeply embedded within complex logic (e.g., multiple layers of indirection, nested structures, or intertwined control flows), making it harder to analyze but still exploitable. The goal is to assess how much additional complexity surrounds the vulnerable logic, not the overall function size.",
    "'Completeness' means that the function includes all its original content without omitting any parts using ellipses or other similar methods.",
    "'Relevance' refers to the degree of association between the function content and its primary task.",
    "'Domain-Specificity' refers to the degree to which the function is tailored to a particular domain or application context.",
    "'Single-Function Enclosure' refers to the extent to which all logic is encapsulated within a single function. While function calls are allowed within this function, no additional function definitions (i.e., function bodies) should appear in the code. Additionally, global variables and macro definitions (e.g., #define) should be avoided unless they are necessary and placed inside the function."
]

quality_refine_prompts = [
    "To enhance complexity, consider:\n1-Introducing additional layers of logic (e.g., nested conditions, loops) around the vulnerable code\n2-Obfuscating the vulnerable behavior by spreading it across multiple code constructs while keeping it within a single function\n3-Introduce error checks that are insufficient or incomplete, or error handling that inadvertently introduces new vulnerabilities. Ensure that existing vulnerabilities are preserved\n4-Other reasonable techniques\nPlease suggest improvements to increase the complexity of the vulnerable parts while ensuring they remain exploitable.",
    "To enhance completeness, consider:\n1-Restoring omitted sections while keeping the function vulnerable\n2-Other reasonable techniques\nPlease suggest improvements to ensure the function is fully complete while keeping it vulnerable.",
    "To improve relevance, consider:\n1-Removing lines of code unrelated to the functionâ€™s main task\n2-Expand the function's main logic to include more in-depth handling of its primary task\n3-Add relevant, deeper processing steps that directly support the function's main objective\n4-Other reasonable techniques\nPlease suggest improvements to enhance the relevance of the function while keeping it vulnerable. Also, ensure that all added logic is directly related to the function's core purpose.",
    "To improve domain specificity, consider:\n1-Replacing existing generic identifiers(ie. function names, variables) with domain-specific ones\n2-Injecting CWE-relevant vulnerabilities that are closely related to the domain. For example, if the domain is web development, consider injecting CWEs related to SQL injection or cross-site scripting (XSS) into existing function\n3-Other reasonable techniques\nPlease suggest improvements to make the function more domain-specific while preserving its vulnerabilities.",
    "To enhance single-function enclosure, consider:\n1-Refactoring external function definitions into inline logic\n2-Eliminating unnecessary global variables or macros by moving them inside the function\n3-Other reasonable techniques\nPlease suggest improvements to ensure the function follows single-function enclosure principles while keeping it vulnerable."
]

feedback_prompt = "Step {step}: Summarize and Provide Feedback. Based on your understanding and assessments of the function in Steps above, summarize the evaluations you have made and provide feedback on how to refine the provided code to improve its quality in the areas assessed."\
    " Below you will be given some possible methods to improve the function quality in the target areas. You may refer to these suggestions to build your feedback or use your own reasonable methods."\
    "\nNote:\n1-We are building a high-quality vulnerable function sample. Therefore, do not fix any vulnerabilities in the given function. Instead, you are welcome to introduce new vulnerabilities that are relevant to the function's domain and enhance its realism.\n2-Focus on improving the existing function. Do not add extra functions into the existing code.\n3-There is no need to add comments as part of the refinement.\n" \
    "Your answer should be within 150 tokens.\n"\
    "\n[possible methods]\n{methods}\n"

refine_system = "I am building a dataset of vulnerable functions. You are an assistant tasked with helping me refine the provided function. Your goal is to improve it based on the given aspects while preserving any existing vulnerabilities. Please use your expertise and background knowledge to assist me in this process.\n\n"

refine_prompt = "Step {step}: Refine the Function. I've recieved some suggestions about the provided function below, please help me refine the function based on that feedback to improve its quality in the target areas given below." \
                " Please provide the complete function after refine in the following format: ```c //(function after refine) ```." \
                "\nNote:\n1-We are building a high-quality vulnerable function sample. Therefore, do not fix any vulnerabilities in the given function. Instead, you are welcome to introduce new vulnerabilities that are relevant to the function's domain and enhance its realism.\n2-Focus on improving the existing function. Do not add extra functions into the existing code.\n3-There is no need to add comments as part of the refinement.\n" \
                "\n[function]\n```c\n{code}\n```\n[suggestion]\n{suggestion}\n[target areas]\n{areas}\n"

inject_system = "I am building a dataset of vulnerable functions. Your task is to assist me in creating high-quality vulnerable function samples by injecting specific types of vulnerabilities into the provided functions. The goal is to introduce vulnerabilities rather than fix existing ones. Additionally, do not add extra functions into existing code. Please use your expertise and background knowledge to help me in this process.\n\n"

inject_prompts = [
    "Step {step}: inject vulnerabilities. The given code lacks certain types of vulnerabilities. You will be provided with descriptions of these vulnerabilities. "
    "Remember, your task is to inject these vulnerabilities into the function above, not to fix them. "
    "Please modify the function above to inject these vulnerabilities, making it a high-quality vulnerable function sample. "
    "You may achieve this by:\n1-Replacing existing correct parts with equivalent logic that introduces vulnerabilities.\n2-Adding new parts with vulnerabilities that relate to the existing function logic.\n3-Using other reasonable methods. "
    "Please provide the complete function after injection in the following format: ```c //(function after injection) ```. Your answer should be within 125 tokens. "
    "\n[vulnerability type descriptions]\n{type}\n\n"
]